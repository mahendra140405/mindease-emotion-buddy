
import React, { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select";

// Language keyboard layouts
const languageKeyboards: Record<string, Record<string, string>> = {
  te: {
    'a': '‡∞Ö', 'aa': '‡∞Ü', 'i': '‡∞á', 'ii': '‡∞à',
    'u': '‡∞â', 'uu': '‡∞ä', 'e': '‡∞é', 'ee': '‡∞è',
    'o': '‡∞í', 'oo': '‡∞ì', 'k': '‡∞ï', 'kh': '‡∞ñ',
    'g': '‡∞ó', 'gh': '‡∞ò', 'ch': '‡∞ö', 'j': '‡∞ú',
    't': '‡∞§', 'th': '‡∞•', 'd': '‡∞¶', 'dh': '‡∞ß',
    'n': '‡∞®', 'p': '‡∞™', 'ph': '‡∞´', 'b': '‡∞¨',
    'bh': '‡∞≠', 'm': '‡∞Æ', 'y': '‡∞Ø', 'r': '‡∞∞',
    'l': '‡∞≤', 'v': '‡∞µ', 's': '‡∞∏', 'h': '‡∞π',
  },
  hi: {
    'a': '‡§Ö', 'aa': '‡§Ü', 'i': '‡§á', 'ii': '‡§à',
    'u': '‡§â', 'uu': '‡§ä', 'e': '‡§è', 'ai': '‡§ê',
    'o': '‡§ì', 'au': '‡§î', 'k': '‡§ï', 'kh': '‡§ñ',
    'g': '‡§ó', 'gh': '‡§ò', 'ch': '‡§ö', 'chh': '‡§õ',
    'j': '‡§ú', 'jh': '‡§ù', 't': '‡§§', 'th': '‡§•',
    'd': '‡§¶', 'dh': '‡§ß', 'n': '‡§®', 'p': '‡§™',
    'ph': '‡§´', 'b': '‡§¨', 'bh': '‡§≠', 'm': '‡§Æ',
    'y': '‡§Ø', 'r': '‡§∞', 'l': '‡§≤', 'v': '‡§µ',
    'sh': '‡§∂', 's': '‡§∏', 'h': '‡§π',
  },
  ta: {
    'a': '‡ÆÖ', 'aa': '‡ÆÜ', 'i': '‡Æá', 'ii': '‡Æà',
    'u': '‡Æâ', 'uu': '‡Æä', 'e': '‡Æé', 'ee': '‡Æè',
    'ai': '‡Æê', 'o': '‡Æí', 'oo': '‡Æì', 'au': '‡Æî',
    'k': '‡Æï', 'ng': '‡Æô', 'ch': '‡Æö', 'nj': '‡Æû',
    't': '‡Æü', 'n': '‡Æ£', 'th': '‡Æ§', 'nh': '‡Æ®',
    'p': '‡Æ™', 'm': '‡ÆÆ', 'y': '‡ÆØ', 'r': '‡Æ∞',
    'l': '‡Æ≤', 'v': '‡Æµ', 'zh': '‡Æ¥', 'll': '‡Æ≥',
    'lr': '‡Æ±', 'n': '‡Æ©', 'j': '‡Æú', 'sh': '‡Æ∑',
    's': '‡Æ∏', 'h': '‡Æπ',
  },
};

// Virtual keyboard component
const VirtualKeyboard = ({ language, onKeyClick }: { language: string, onKeyClick: (key: string) => void }) => {
  if (!languageKeyboards[language]) return null;
  
  const keyboard = languageKeyboards[language];
  
  return (
    <div className="p-2 bg-gray-100 dark:bg-gray-800 rounded-md shadow-inner">
      <div className="grid grid-cols-8 gap-1 mb-1">
        {Object.entries(keyboard).slice(0, 16).map(([roman, char]) => (
          <button 
            key={roman} 
            className="text-sm p-1 bg-white dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600"
            onClick={() => onKeyClick(char)}
          >
            {char}
          </button>
        ))}
      </div>
      <div className="grid grid-cols-8 gap-1">
        {Object.entries(keyboard).slice(16, 32).map(([roman, char]) => (
          <button 
            key={roman} 
            className="text-sm p-1 bg-white dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600"
            onClick={() => onKeyClick(char)}
          >
            {char}
          </button>
        ))}
      </div>
    </div>
  );
};

interface MultilingualInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
  multiline?: boolean;
  id?: string;
}

const MultilingualInput: React.FC<MultilingualInputProps> = ({
  value,
  onChange,
  placeholder = "Type your message...",
  className = "",
  multiline = false,
  id
}) => {
  const [showKeyboard, setShowKeyboard] = useState(false);
  const [language, setLanguage] = useState<string>("en");
  
  const handleKeyClick = (char: string) => {
    onChange(value + char);
  };
  
  const toggleKeyboard = () => {
    setShowKeyboard(!showKeyboard);
  };
  
  const handleLanguageChange = (newLang: string) => {
    setLanguage(newLang);
    if (newLang !== "en") {
      setShowKeyboard(true);
    } else {
      setShowKeyboard(false);
    }
  };
  
  const InputComponent = multiline ? Textarea : Input;
  
  return (
    <div className="flex flex-col space-y-1">
      <div className="flex items-center gap-2">
        <div className="flex-1">
          <InputComponent
            id={id}
            value={value}
            onChange={(e) => onChange(e.target.value)}
            placeholder={placeholder}
            className={className}
          />
        </div>
        <div>
          <Select value={language} onValueChange={handleLanguageChange}>
            <SelectTrigger className="w-[100px]">
              <SelectValue placeholder="Language" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="en">English</SelectItem>
              <SelectItem value="hi">Hindi</SelectItem>
              <SelectItem value="te">Telugu</SelectItem>
              <SelectItem value="ta">Tamil</SelectItem>
            </SelectContent>
          </Select>
        </div>
        {language !== "en" && (
          <button 
            className={`p-2 rounded-full ${showKeyboard ? 'bg-primary text-white' : 'bg-gray-200 dark:bg-gray-700'}`}
            onClick={toggleKeyboard}
          >
            {showKeyboard ? "Hide" : "üåê"}
          </button>
        )}
      </div>
      
      {showKeyboard && language !== "en" && (
        <VirtualKeyboard language={language} onKeyClick={handleKeyClick} />
      )}
    </div>
  );
};

export default MultilingualInput;
